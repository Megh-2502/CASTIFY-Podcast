{"ast":null,"code":"// import React, { useEffect, useState, useRef } from 'react'\n// import styled from \"styled-components\";\n// import { useTheme } from \"styled-components\";\n// import OtpInput from 'react-otp-input';\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import { useDispatch } from 'react-redux';\n// import { openSnackbar } from \"../redux/snackbarSlice\";\n// import { generateOtp, verifyOtp } from '../api';\n\n// const Title = styled.div`\n//   font-size: 22px;\n//   font-weight: 500;\n//   color: ${({ theme }) => theme.text_primary};\n//   margin: 16px 22px;\n// `;\n\n// const OutlinedBox = styled.div`\n//   height: 44px;\n//   border-radius: 12px;\n//   border: 1px solid ${({ theme }) => theme.text_secondary};\n//   color: ${({ theme }) => theme.text_secondary};\n//   ${({ googleButton, theme }) =>\n//         googleButton &&\n//         `\n//     user-select: none; \n//   gap: 16px;`}\n//   ${({ button, theme }) =>\n//         button &&\n//         `\n//     user-select: none; \n//   border: none;\n//     background: ${theme.button};\n//     color: '${theme.text_secondary}';`}\n//     ${({ activeButton, theme }) =>\n//         activeButton &&\n//         `\n//     user-select: none; \n//   border: none;\n//     background: ${theme.primary};\n//     color: white;`}\n//   margin: 3px 20px;\n//   font-size: 14px;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   font-weight: 500;\n//   padding: 0px 14px;\n// `;\n\n// const LoginText = styled.div`\n//   font-size: 14px;\n//   font-weight: 500;\n//   color: ${({ theme }) => theme.text_secondary};\n//   margin: 0px 26px 0px 26px;\n// `;\n// const Span = styled.span`\n//   color: ${({ theme }) => theme.primary};\n//   font-size: 12px;\n//   margin: 0px 26px 0px 26px;\n// `;\n\n// const Error = styled.div`\n//   color: red;\n//   font-size: 12px;\n//   margin: 2px 26px 8px 26px;\n//   display: block;\n//   ${({ error, theme }) =>\n//         error === \"\" &&\n//         `    display: none;\n//     `}\n// `;\n\n// const Timer = styled.div`\n//     color: ${({ theme }) => theme.text_secondary};\n//     font-size: 12px;\n//     margin: 2px 26px 8px 26px;\n//     display: block;\n// `;\n\n// const Resend = styled.div`\n//     color: ${({ theme }) => theme.primary};\n//     font-size: 14px;\n//     margin: 2px 26px 8px 26px;\n//     display: block;\n//     cursor: pointer;\n// `;\n\n// const OTP = ({ email, name, otpVerified, setOtpVerified, reason }) => {\n//     const theme = useTheme();\n//     const dispatch = useDispatch();\n\n//     const [otp, setOtp] = useState('');\n//     const [otpError, setOtpError] = useState('');\n//     const [otpLoading, setOtpLoading] = useState(false);\n//     const [disabled, setDisabled] = useState(true);\n//     const [showTimer, setShowTimer] = useState(false);\n//     const [otpSent, setOtpSent] = useState(false);\n//     const [timer, setTimer] = useState('00:00');\n\n//     const Ref = useRef(null);\n\n//     const getTimeRemaining = (e) => {\n//         const total = Date.parse(e) - Date.parse(new Date());\n//         const seconds = Math.floor((total / 1000) % 60);\n//         const minutes = Math.floor((total / 1000 / 60) % 60);\n//         const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n//         return {\n//             total, hours, minutes, seconds\n//         };\n//     }\n\n//     const startTimer = (e) => {\n//         let { total, hours, minutes, seconds }\n//             = getTimeRemaining(e);\n//         if (total >= 0) {\n\n//             // update the timer\n//             // check if less than 10 then we need to \n//             // add '0' at the beginning of the variable\n//             setTimer(\n//                 (minutes > 9 ? minutes : '0' + minutes) + ':'\n//                 + (seconds > 9 ? seconds : '0' + seconds)\n//             )\n\n//         }\n//     }\n\n//     const clearTimer = (e) => {\n\n//         // If you adjust it you should also need to\n//         // adjust the Endtime formula we are about\n//         // to code next    \n//         setTimer('01:00');\n\n//         // If you try to remove this line the \n//         // updating of timer Variable will be\n//         // after 1000ms or 1sec\n//         if (Ref.current) clearInterval(Ref.current);\n//         const id = setInterval(() => {\n//             startTimer(e);\n//         }, 1000)\n//         Ref.current = id;\n//     }\n\n//     const getDeadTime = () => {\n//         let deadline = new Date();\n\n//         // This is where you need to adjust if \n//         // you entend to add more time\n//         deadline.setSeconds(deadline.getSeconds() + 60);\n//         return deadline;\n//     }\n\n//     const resendOtp = () => {\n//         setShowTimer(true);\n//         clearTimer(getDeadTime());\n//         sendOtp();\n//     }\n\n//     const sendOtp = async () => {\n//         await generateOtp(email, name, reason).then((res) => {\n//             if (res.status === 200) {\n//                 dispatch(\n//                     openSnackbar({\n//                         message: \"OTP sent Successfully\",\n//                         severity: \"success\",\n//                     })\n//                 );\n//                 setDisabled(true);\n//                 setOtp('');\n//                 setOtpError('');\n//                 setOtpLoading(false);\n//                 setOtpSent(true);\n//                 console.log(res.data);\n//             } else {\n//                 dispatch(\n//                     openSnackbar({\n//                         message: res.status,\n//                         severity: \"error\",\n//                     })\n//                 );\n//                 setOtp('');\n//                 setOtpError('');\n//                 setOtpLoading(false);\n//             }\n//         }).catch((err) => {\n//             dispatch(\n//                 openSnackbar({\n//                     message: err.message,\n//                     severity: \"error\",\n//                 })\n//             );\n//         });\n//     }\n\n//     const validateOtp = () => {\n//         setOtpLoading(true);\n//         setDisabled(true);\n//         verifyOtp(otp).then((res) => {\n//             if (res.status === 200) {\n//                 setOtpVerified(true);\n//                 setOtp('');\n//                 setOtpError('');\n//                 setDisabled(false);\n//                 setOtpLoading(false);\n//             } else {\n//                 setOtpError(res.data.message);\n//                 setDisabled(false);\n//                 setOtpLoading(false);\n//             }\n//         }).catch((err) => {\n//             dispatch(\n//                 openSnackbar({\n//                     message: err.message,\n//                     severity: \"error\",\n//                 })\n//             );\n//             setOtpError(err.message);\n//             setDisabled(false);\n//             setOtpLoading(false);\n//         });\n//     }\n\n//     useEffect(() => {\n//         sendOtp();\n//         clearTimer(getDeadTime());\n//     }, []);\n\n//     useEffect(() => {\n//         if (timer === '00:00') {\n//             setShowTimer(false);\n//         } else {\n//             setShowTimer(true);\n//         }\n//     }, [timer]);\n\n//     useEffect(() => {\n//         if (otp.length === 6) {\n//             setDisabled(false);\n//         } else {\n//             setDisabled(true);\n//         }\n//     }, [otp]);\n\n//     return (\n//         <div>\n//             <Title>VERIFY OTP</Title>\n//             <LoginText >A verification <b>&nbsp;OTP &nbsp;</b> has been sent to: </LoginText>\n//             <Span>{email}</Span>\n//             {!otpSent ?\n//                 <div style={{padding: '12px 26px', marginBottom: '20px', textAlign: 'center', display: 'flex',flexDirection: 'column',alignItems: 'center',gap: '14px',justifyContent:'center'}}>Sending OTP<CircularProgress color=\"inherit\" size={20} /></div>\n//                 :\n//                 <div>\n//                     <OtpInput\n//                         value={otp}\n//                         onChange={setOtp}\n//                         numInputs={6}\n//                         shouldAutoFocus={true}\n//                         inputStyle={{ fontSize: \"22px\", width: \"38px\", height: \"38px\", borderRadius: \"5px\", border: \"1px solid #ccc\", textAlign: \"center\", margin: \"6px 4px\", backgroundColor: 'transparent', color: theme.text_primary }}\n//                         containerStyle={{ padding: '8px 2px', justifyContent: 'center' }}\n//                         renderInput={(props) => <input {...props} />}\n//                     />\n//                     <Error error={otpError}><b>{otpError}</b></Error>\n\n//                     <OutlinedBox\n//                         button={true}\n//                         activeButton={!disabled}\n//                         style={{ marginTop: \"12px\", marginBottom: \"12px\" }}\n//                         onClick={() => validateOtp()}\n//                     >\n//                         {otpLoading ? (\n//                             <CircularProgress color=\"inherit\" size={20} />\n//                         ) : (\n//                             \"Submit\"\n//                         )}\n//                     </OutlinedBox>\n\n//                     {showTimer ?\n//                         <Timer>Resend in <b>{timer}</b></Timer>\n//                         :\n//                         <Resend onClick={() => resendOtp()}><b>Resend</b></Resend>\n//                     }\n//                 </div>\n//             }\n//         </div>\n//     )\n// }\n\n// export default OTP","map":{"version":3,"names":[],"sources":["C:/Users/aditi/OneDrive/Desktop/Podstream-main/client/src/components/OTP.jsx"],"sourcesContent":["// import React, { useEffect, useState, useRef } from 'react'\n// import styled from \"styled-components\";\n// import { useTheme } from \"styled-components\";\n// import OtpInput from 'react-otp-input';\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import { useDispatch } from 'react-redux';\n// import { openSnackbar } from \"../redux/snackbarSlice\";\n// import { generateOtp, verifyOtp } from '../api';\n\n\n// const Title = styled.div`\n//   font-size: 22px;\n//   font-weight: 500;\n//   color: ${({ theme }) => theme.text_primary};\n//   margin: 16px 22px;\n// `;\n\n\n// const OutlinedBox = styled.div`\n//   height: 44px;\n//   border-radius: 12px;\n//   border: 1px solid ${({ theme }) => theme.text_secondary};\n//   color: ${({ theme }) => theme.text_secondary};\n//   ${({ googleButton, theme }) =>\n//         googleButton &&\n//         `\n//     user-select: none; \n//   gap: 16px;`}\n//   ${({ button, theme }) =>\n//         button &&\n//         `\n//     user-select: none; \n//   border: none;\n//     background: ${theme.button};\n//     color: '${theme.text_secondary}';`}\n//     ${({ activeButton, theme }) =>\n//         activeButton &&\n//         `\n//     user-select: none; \n//   border: none;\n//     background: ${theme.primary};\n//     color: white;`}\n//   margin: 3px 20px;\n//   font-size: 14px;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   font-weight: 500;\n//   padding: 0px 14px;\n// `;\n\n\n// const LoginText = styled.div`\n//   font-size: 14px;\n//   font-weight: 500;\n//   color: ${({ theme }) => theme.text_secondary};\n//   margin: 0px 26px 0px 26px;\n// `;\n// const Span = styled.span`\n//   color: ${({ theme }) => theme.primary};\n//   font-size: 12px;\n//   margin: 0px 26px 0px 26px;\n// `;\n\n// const Error = styled.div`\n//   color: red;\n//   font-size: 12px;\n//   margin: 2px 26px 8px 26px;\n//   display: block;\n//   ${({ error, theme }) =>\n//         error === \"\" &&\n//         `    display: none;\n//     `}\n// `;\n\n// const Timer = styled.div`\n//     color: ${({ theme }) => theme.text_secondary};\n//     font-size: 12px;\n//     margin: 2px 26px 8px 26px;\n//     display: block;\n// `;\n\n// const Resend = styled.div`\n//     color: ${({ theme }) => theme.primary};\n//     font-size: 14px;\n//     margin: 2px 26px 8px 26px;\n//     display: block;\n//     cursor: pointer;\n// `;\n\n\n// const OTP = ({ email, name, otpVerified, setOtpVerified, reason }) => {\n//     const theme = useTheme();\n//     const dispatch = useDispatch();\n\n\n//     const [otp, setOtp] = useState('');\n//     const [otpError, setOtpError] = useState('');\n//     const [otpLoading, setOtpLoading] = useState(false);\n//     const [disabled, setDisabled] = useState(true);\n//     const [showTimer, setShowTimer] = useState(false);\n//     const [otpSent, setOtpSent] = useState(false);\n//     const [timer, setTimer] = useState('00:00');\n\n\n//     const Ref = useRef(null);\n\n//     const getTimeRemaining = (e) => {\n//         const total = Date.parse(e) - Date.parse(new Date());\n//         const seconds = Math.floor((total / 1000) % 60);\n//         const minutes = Math.floor((total / 1000 / 60) % 60);\n//         const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n//         return {\n//             total, hours, minutes, seconds\n//         };\n//     }\n\n//     const startTimer = (e) => {\n//         let { total, hours, minutes, seconds }\n//             = getTimeRemaining(e);\n//         if (total >= 0) {\n\n//             // update the timer\n//             // check if less than 10 then we need to \n//             // add '0' at the beginning of the variable\n//             setTimer(\n//                 (minutes > 9 ? minutes : '0' + minutes) + ':'\n//                 + (seconds > 9 ? seconds : '0' + seconds)\n//             )\n\n//         }\n//     }\n\n//     const clearTimer = (e) => {\n\n//         // If you adjust it you should also need to\n//         // adjust the Endtime formula we are about\n//         // to code next    \n//         setTimer('01:00');\n\n//         // If you try to remove this line the \n//         // updating of timer Variable will be\n//         // after 1000ms or 1sec\n//         if (Ref.current) clearInterval(Ref.current);\n//         const id = setInterval(() => {\n//             startTimer(e);\n//         }, 1000)\n//         Ref.current = id;\n//     }\n\n//     const getDeadTime = () => {\n//         let deadline = new Date();\n\n//         // This is where you need to adjust if \n//         // you entend to add more time\n//         deadline.setSeconds(deadline.getSeconds() + 60);\n//         return deadline;\n//     }\n\n//     const resendOtp = () => {\n//         setShowTimer(true);\n//         clearTimer(getDeadTime());\n//         sendOtp();\n//     }\n\n//     const sendOtp = async () => {\n//         await generateOtp(email, name, reason).then((res) => {\n//             if (res.status === 200) {\n//                 dispatch(\n//                     openSnackbar({\n//                         message: \"OTP sent Successfully\",\n//                         severity: \"success\",\n//                     })\n//                 );\n//                 setDisabled(true);\n//                 setOtp('');\n//                 setOtpError('');\n//                 setOtpLoading(false);\n//                 setOtpSent(true);\n//                 console.log(res.data);\n//             } else {\n//                 dispatch(\n//                     openSnackbar({\n//                         message: res.status,\n//                         severity: \"error\",\n//                     })\n//                 );\n//                 setOtp('');\n//                 setOtpError('');\n//                 setOtpLoading(false);\n//             }\n//         }).catch((err) => {\n//             dispatch(\n//                 openSnackbar({\n//                     message: err.message,\n//                     severity: \"error\",\n//                 })\n//             );\n//         });\n//     }\n\n//     const validateOtp = () => {\n//         setOtpLoading(true);\n//         setDisabled(true);\n//         verifyOtp(otp).then((res) => {\n//             if (res.status === 200) {\n//                 setOtpVerified(true);\n//                 setOtp('');\n//                 setOtpError('');\n//                 setDisabled(false);\n//                 setOtpLoading(false);\n//             } else {\n//                 setOtpError(res.data.message);\n//                 setDisabled(false);\n//                 setOtpLoading(false);\n//             }\n//         }).catch((err) => {\n//             dispatch(\n//                 openSnackbar({\n//                     message: err.message,\n//                     severity: \"error\",\n//                 })\n//             );\n//             setOtpError(err.message);\n//             setDisabled(false);\n//             setOtpLoading(false);\n//         });\n//     }\n\n//     useEffect(() => {\n//         sendOtp();\n//         clearTimer(getDeadTime());\n//     }, []);\n\n//     useEffect(() => {\n//         if (timer === '00:00') {\n//             setShowTimer(false);\n//         } else {\n//             setShowTimer(true);\n//         }\n//     }, [timer]);\n\n\n//     useEffect(() => {\n//         if (otp.length === 6) {\n//             setDisabled(false);\n//         } else {\n//             setDisabled(true);\n//         }\n//     }, [otp]);\n\n\n\n\n//     return (\n//         <div>\n//             <Title>VERIFY OTP</Title>\n//             <LoginText >A verification <b>&nbsp;OTP &nbsp;</b> has been sent to: </LoginText>\n//             <Span>{email}</Span>\n//             {!otpSent ?\n//                 <div style={{padding: '12px 26px', marginBottom: '20px', textAlign: 'center', display: 'flex',flexDirection: 'column',alignItems: 'center',gap: '14px',justifyContent:'center'}}>Sending OTP<CircularProgress color=\"inherit\" size={20} /></div>\n//                 :\n//                 <div>\n//                     <OtpInput\n//                         value={otp}\n//                         onChange={setOtp}\n//                         numInputs={6}\n//                         shouldAutoFocus={true}\n//                         inputStyle={{ fontSize: \"22px\", width: \"38px\", height: \"38px\", borderRadius: \"5px\", border: \"1px solid #ccc\", textAlign: \"center\", margin: \"6px 4px\", backgroundColor: 'transparent', color: theme.text_primary }}\n//                         containerStyle={{ padding: '8px 2px', justifyContent: 'center' }}\n//                         renderInput={(props) => <input {...props} />}\n//                     />\n//                     <Error error={otpError}><b>{otpError}</b></Error>\n\n\n//                     <OutlinedBox\n//                         button={true}\n//                         activeButton={!disabled}\n//                         style={{ marginTop: \"12px\", marginBottom: \"12px\" }}\n//                         onClick={() => validateOtp()}\n//                     >\n//                         {otpLoading ? (\n//                             <CircularProgress color=\"inherit\" size={20} />\n//                         ) : (\n//                             \"Submit\"\n//                         )}\n//                     </OutlinedBox>\n\n//                     {showTimer ?\n//                         <Timer>Resend in <b>{timer}</b></Timer>\n//                         :\n//                         <Resend onClick={() => resendOtp()}><b>Resend</b></Resend>\n//                     }\n//                 </div>\n//             }\n//         </div>\n//     )\n// }\n\n// export default OTP"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}